struct lightInfo{
	vec3 pos;
	vec3 la;
	vec3 ld;
	vec3 ls;
};

struct materialInfo{
	vec3 ka;
	vec3 kd;
	vec3 ks;
	float shine;
};

funiform lightInfo Lights[10];
funiform int LIGHTNUM;
funiform materialInfo Mat;

fragment void getEyeSpace(out vec3 norm,out vec4 pos,mat3 Normal,vec3 VN,mat4 MV,vec3 Vpos){
	norm = normalize(Normal*VN);
	pos = MV*vec4(Vpos,1.0);
}
/*
fragment vec3 phongModel(vec4 position,vec3 normal,int i,mat4 fm){
	vec4 e = Lights[i].position*fm;
	vec3 s = normalize(vec3(e-position));
	vec3 v = normalize(-position.xyz);
	vec3 r = reflect(-s,normal);

	vec3 ambient = Lights[i].la*Mat.ka;
	float sDotN = max(dot(s,normal),0.0);
	vec3 diffuse =  Lights[i].ld * Mat.kd * sDotN;
	vec3 spec = vec3(0.0);
	if(sDotN>0.0)
		spec = Lights[i].ls * Mat.ks*pow(max(dot(r,v),0.0),Mat.shine);

	return ambient+ diffuse+ spec;
}

fragment vec3 ads(vec4 pos,vec3 norm,int lx)
{
	vec3 s = normalize(vec3(Lights[lx].position-pos));

	vec3 v = normalize(vec3(-pos));
	vec3 r = reflect(-s,norm);
	vec3 I = vec3(Lights[lx].inten,Lights[lx].inten,Lights[lx].inten);
	vec3 aa =Mat.ka*Lights[lx].la;
	vec3 dd = Mat.kd*Lights[lx].ld*max(dot(s,norm),0.0);
	vec3 ss = Lights[lx].ls*Mat.ks*pow(max(dot(r,v),0.0),Mat.shine);
	return I*(aa+dd+ss);
}

fragment vec4 calcLight(int i, vec3 norm){
	float diffuseFactor= dot(Lights[i].dir,norm);
	vec4 diffuseColor = vec4(0,0,0,0);
	
	if(diffuseFactor>0)
		diffuseColor = vec4(Lights[i].color,1.0)*diffuseFactor*Lights[i].inten;
		
		
	return diffuseColor;
}*/

fragment vec3 calcLight(int i,vec3 pos,vec3 norm){
	vec3 lpos = vec3(vec4(Lights[i].pos,1));
	float dist = length(pos-lpos);
	float att = 1.0/(1.0+0.1*dist+0.01*dist*dist);
	vec3 ambient = Mat.ka*Lights[i].la;

	vec3 surf2light=normalize(lpos-pos);
	vec3 N = normalize(norm);
	float dcont = max(0.0,dot(N,surf2light));
	vec3 diffuse=dcont*(Mat.kd*Lights[i].ld);

	vec3 surf2view=normalize(-pos);
	vec3 reflection = reflect(-surf2light,N);

	float scont = pow(max(0.0,dot(surf2view,reflection)),Mat.shine);
	vec3 specular = scont*Lights[i].ls*Mat.ks;

	return (ambient+diffuse+specular)*att;
}